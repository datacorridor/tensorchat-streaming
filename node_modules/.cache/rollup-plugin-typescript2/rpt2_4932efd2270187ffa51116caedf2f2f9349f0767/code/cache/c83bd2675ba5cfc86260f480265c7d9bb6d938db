{"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { TensorChatStreaming } from './TensorChatStreaming';\n/**\n * Framework-agnostic TensorChat streaming client manager\n * This replaces the React hook with a generic class-based approach\n */\nvar TensorChatStreamingManager = /** @class */ (function () {\n    function TensorChatStreamingManager(config) {\n        this.client = null;\n        this.config = config;\n        this.initialize();\n    }\n    TensorChatStreamingManager.prototype.initialize = function () {\n        if (this.client) {\n            this.client.destroy();\n        }\n        this.client = new TensorChatStreaming(this.config);\n    };\n    /**\n     * Update configuration and reinitialize client\n     */\n    TensorChatStreamingManager.prototype.updateConfig = function (newConfig) {\n        this.config = __assign(__assign({}, this.config), newConfig);\n        this.initialize();\n    };\n    /**\n     * Stream process tensors with real-time callbacks\n     */\n    TensorChatStreamingManager.prototype.streamProcess = function (request_1) {\n        return __awaiter(this, arguments, void 0, function (request, callbacks) {\n            if (callbacks === void 0) { callbacks = {}; }\n            return __generator(this, function (_a) {\n                if (!this.client) {\n                    throw new Error('TensorChat client not initialized');\n                }\n                return [2 /*return*/, this.client.streamProcess(request, callbacks)];\n            });\n        });\n    };\n    /**\n     * Process a single tensor (non-streaming)\n     */\n    TensorChatStreamingManager.prototype.processSingle = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (!this.client) {\n                    throw new Error('TensorChat client not initialized');\n                }\n                return [2 /*return*/, this.client.processSingle(request)];\n            });\n        });\n    };\n    /**\n     * Get the underlying client instance\n     */\n    TensorChatStreamingManager.prototype.getClient = function () {\n        return this.client;\n    };\n    /**\n     * Clean up resources\n     */\n    TensorChatStreamingManager.prototype.destroy = function () {\n        if (this.client) {\n            this.client.destroy();\n            this.client = null;\n        }\n    };\n    return TensorChatStreamingManager;\n}());\nexport { TensorChatStreamingManager };\n/**\n * Factory function for creating a TensorChat streaming manager\n * @param config - Configuration for the TensorChat client\n * @returns A new TensorChatStreamingManager instance\n */\nexport function createTensorChatStreaming(config) {\n    return new TensorChatStreamingManager(config);\n}\n","references":["D:/Git/tensorchat-streaming/src/TensorChatStreaming.ts","D:/Git/tensorchat-streaming/src/types.ts"],"dts":{"name":"D:/Git/tensorchat-streaming/dist/useTensorChatStreaming.d.ts","writeByteOrderMark":false,"text":"import { TensorChatStreaming } from './TensorChatStreaming';\nimport { StreamRequest, StreamCallbacks, TensorChatConfig } from './types';\n/**\n * Framework-agnostic TensorChat streaming client manager\n * This replaces the React hook with a generic class-based approach\n */\nexport declare class TensorChatStreamingManager {\n    private client;\n    private config;\n    constructor(config: TensorChatConfig);\n    private initialize;\n    /**\n     * Update configuration and reinitialize client\n     */\n    updateConfig(newConfig: Partial<TensorChatConfig>): void;\n    /**\n     * Stream process tensors with real-time callbacks\n     */\n    streamProcess(request: StreamRequest, callbacks?: StreamCallbacks): Promise<void>;\n    /**\n     * Process a single tensor (non-streaming)\n     */\n    processSingle(request: StreamRequest): Promise<any>;\n    /**\n     * Get the underlying client instance\n     */\n    getClient(): TensorChatStreaming | null;\n    /**\n     * Clean up resources\n     */\n    destroy(): void;\n}\n/**\n * Factory function for creating a TensorChat streaming manager\n * @param config - Configuration for the TensorChat client\n * @returns A new TensorChatStreamingManager instance\n */\nexport declare function createTensorChatStreaming(config: TensorChatConfig): TensorChatStreamingManager;\n"}}
