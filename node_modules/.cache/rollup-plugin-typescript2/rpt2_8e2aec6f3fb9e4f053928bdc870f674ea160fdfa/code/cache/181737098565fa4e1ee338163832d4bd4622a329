{"code":"export {};\n","references":[],"dts":{"name":"D:/Git/tensorchat-streaming/dist/types.d.ts","writeByteOrderMark":false,"text":"export interface TensorConfig {\n    messages: string;\n    concise?: boolean;\n    model?: string;\n    search?: boolean;\n}\nexport interface StreamRequest {\n    context: string;\n    model: string;\n    tensors: TensorConfig[];\n}\nexport interface StreamEventData {\n    type: 'start' | 'progress' | 'search_progress' | 'search_complete' | 'tensor_chunk' | 'tensor_complete' | 'tensor_error' | 'complete' | 'error' | 'fatal_error';\n    index?: number;\n    chunk?: string;\n    result?: any;\n    error?: string;\n    details?: string;\n    totalTensors?: number;\n    model?: string;\n    searchApplied?: boolean;\n    tensors?: any[];\n    streamBuffers?: string[];\n}\nexport interface StreamCallbacks {\n    onStart?: (data: StreamEventData) => void;\n    onProgress?: (data: StreamEventData) => void;\n    onSearchProgress?: (data: StreamEventData) => void;\n    onSearchComplete?: (data: StreamEventData) => void;\n    onTensorChunk?: (data: StreamEventData) => void;\n    onTensorComplete?: (data: StreamEventData) => void;\n    onTensorError?: (data: StreamEventData) => void;\n    onComplete?: (data: StreamEventData) => void;\n    onError?: (error: Error) => void;\n}\nexport interface TensorchatConfig {\n    apiKey: string;\n    baseUrl?: string;\n    throttleMs?: number;\n}\n"}}
